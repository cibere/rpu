import logging
import logging.handlers
import os
import shutil
import webbrowser
from argparse import Namespace
from pathlib import Path

try:
    import pdoc
    import pdoc.cli
except ImportError:
    raise RuntimeError("'pdoc3' must be installed")
try:
    import rpu
except ImportError:
    raise RuntimeError("'rpu' must be installed")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler())

args = Namespace(
    modules=["rpu"],
    config=["show_source_code=False"],
    filter=None,
    force=False,
    html=True,
    pdf=False,
    html_dir=None,
    output_dir=None,
    html_no_source=False,
    overwrite=False,
    external_links=False,
    template_dir=None,
    link_prefix=None,
    close_stdin=False,
    http="",
    skip_errors=False,
)
pdoc.cli.main(args)

MODULES_TO_REMOVE = ["librarys/index.html"]
LATEST_DOCS_PATH = "docs/latest"

if not os.path.exists(LATEST_DOCS_PATH):
    os.makedirs(LATEST_DOCS_PATH)

TO_REMOVE = [
    '<meta name="generator" content="pdoc 0.10.0" />',
    """<h3>Subclasses</h3>
<ul class="hlist">
<li>rpu.cli.HelpCmd</li>
</ul>""",
    """<p>Random python utilities</p>
<h1 id="rpu">RPU</h1>""",
    """<p>Our docs are located at rpu.cibere.dev. View the <a href="https://rpu.cibere.dev/stable/index.html">stable docs here</a>, and <a href="https://rpu.cibere.dev/latest/index.html">latest docs here</a></p>""",
    """<h3>Instance variables</h3>
<dl>
<dt id="rpu.http.Route.endpoint"><code class="name">var <span class="ident">endpoint</span></code></dt>
<dd>
<div class="desc"><p>Return an attribute of instance, which is of type owner.</p></div>
</dd>
<dt id="rpu.http.Route.headers"><code class="name">var <span class="ident">headers</span></code></dt>
<dd>
<div class="desc"><p>Return an attribute of instance, which is of type owner.</p></div>
</dd>
<dt id="rpu.http.Route.method"><code class="name">var <span class="ident">method</span></code></dt>
<dd>
<div class="desc"><p>Return an attribute of instance, which is of type owner.</p></div>
</dd>
<dt id="rpu.http.Route.query_params"><code class="name">var <span class="ident">query_params</span></code></dt>
<dd>
<div class="desc"><p>Return an attribute of instance, which is of type owner.</p></div>
</dd>
</dl>""",
    """<h1 id="credits">Credits</h1>
<p>You can view the credits <a href="https://github.com/cibere/rpu/blob/main/extras/credits.md">here</a></p>""",
]


def format_page(page):
    fp = f"html/rpu/{page}"

    if page in MODULES_TO_REMOVE:
        logger.info(f"Skipping {page}...")
        return
    logger.info(f"Starting to format {page}")

    with open(fp, "r") as file:
        html = file.read()

    for item in TO_REMOVE:
        html = html.replace(item, "")

    html = html.replace(
        '<p>Generated by <a href="https://pdoc3.github.io/pdoc" title="pdoc: Python API documentation generator"><cite>pdoc</cite> 0.10.0</a>.</p>',
        """
<a href="https://github.com/cibere/rpu"><img style="height: 15px; width: 15px;"
src="https://github.com/favicon.ico"></a>
<a href="https://discord.com/invite/pP4mKKbRvk"><img style="height: 15px; width: 15px;"
src="https://clipground.com/images/discord-icon-png-4.png"></a>""",
    )
    html = html.replace(
        '<h1 class="title">Package <code>rpu</code></h1>',
        '<h1 class="title"><code>rpu</code></h1>',
    )

    with open(f"{LATEST_DOCS_PATH}/{page}", "w+") as file:
        file.write(html)

    logger.info(f"Finished formatting {page}")


logger.info("Starting Formatting")
files = list(Path("html/rpu").glob("**/*.html"))
for file in files:
    fp = str(file)
    name = fp.split("html\\rpu\\")[-1].replace("\\", "/")
    format_page(name)

shutil.rmtree("html")
logger.info(f"Removed old html folder")

logger.info(f"Finished Generation")

_open = input("\nOpen newly generated docs in your browser? [y/n]: ").lower()
if _open.startswith("y"):
    logger.info("Opening...")

    directory = os.getcwd().replace("\\", "/").replace(" ", "%20")
    url = f"file:///{directory}/docs/latest/index.html"
    webbrowser.open(url)
else:
    logger.info("Not opening in browser")
